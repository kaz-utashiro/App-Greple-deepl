=encoding utf-8

=head1 NAME

App::Greple::xlate - greple的翻译支持模块

=head1 SYNOPSIS

    greple -Mxlate -e ENGINE --xlate pattern target-file

    greple -Mxlate::deepl --xlate pattern target-file

=head1 VERSION

Version 0.30

=head1 DESCRIPTION

B<Greple> B<xlate> 模块可以找到所需的文本块并用翻译后的文本替换它们。目前已实现了 DeepL (F<deepl.pm>) 和 ChatGPT (F<gpt3.pm>) 模块作为后端引擎。还包括对 gpt-4 的实验性支持。

如果您想要将Perl的pod样式文档中的普通文本块翻译成中文，请使用以下命令：B<greple>，并结合C<xlate::deepl>和C<perl>模块，如下所示：

    greple -Mxlate::deepl -Mperl --pod --re '^(\w.*\n)+' --all foo.pm

在这个命令中，模式字符串C<^(\w.*\n)+>表示以字母数字字符开头的连续行。这个命令会突出显示要翻译的区域。选项B<--all>用于生成整个文本。

=for html <p>
<img width="750" src="https://raw.githubusercontent.com/kaz-utashiro/App-Greple-xlate/main/images/select-area.png">
</p>

然后添加C<--xlate>选项来翻译所选区域。然后，它会找到所需的部分，并用B<deepl>命令的输出替换它们。

默认情况下，原始文本和翻译后的文本以与L<git(1)>兼容的"冲突标记"格式打印。使用C<ifdef>格式，您可以通过L<unifdef(1)>命令轻松获取所需部分。输出格式可以通过B<--xlate-format>选项指定。

=for html <p>
<img width="750" src="https://raw.githubusercontent.com/kaz-utashiro/App-Greple-xlate/main/images/format-conflict.png">
</p>

如果您想要翻译整个文本，请使用B<--match-all>选项。这是指定模式C<(?s).+>（匹配整个文本）的快捷方式。

=head1 OPTIONS

=over 7

=item B<--xlate>

=item B<--xlate-color>

=item B<--xlate-fold>

=item B<--xlate-fold-width>=I<n> (Default: 70)

为每个匹配的区域调用翻译过程。

如果没有此选项，B<greple>将作为普通搜索命令运行。因此，在调用实际工作之前，您可以检查文件的哪个部分将成为翻译的对象。

命令结果输出到标准输出，如果需要，请重定向到文件，或考虑使用L<App::Greple::update>模块。

选项B<--xlate>调用B<--xlate-color>选项，并带有B<--color=never>选项。

使用B<--xlate-fold>选项，转换后的文本将按指定的宽度折叠。默认宽度为70，可以通过B<--xlate-fold-width>选项设置。四列用于run-in操作，因此每行最多可以容纳74个字符。

=item B<--xlate-engine>=I<engine>

指定要使用的翻译引擎。如果直接指定引擎模块，如C<-Mxlate::deepl>，则不需要使用此选项。

=item B<--xlate-labor>

=item B<--xlabor>

不需要调用翻译引擎，你需要亲自进行翻译。在准备好待翻译的文本后，将其复制到剪贴板。你需要将其粘贴到表单中，将结果复制到剪贴板，并按回车键。

=item B<--xlate-to> (Default: C<EN-US>)

指定目标语言。使用B<DeepL>引擎时，可以通过C<deepl languages>命令获取可用语言。

=item B<--xlate-format>=I<format> (Default: C<conflict>)

指定原始和翻译文本的输出格式。

=over 4

=item B<conflict>, B<cm>

原始文本和转换后的文本以L<git(1)>冲突标记格式打印。

    <<<<<<< ORIGINAL
    original text
    =======
    translated Japanese text
    >>>>>>> JA

您可以通过下一个L<sed(1)>命令恢复原始文件。

    sed -e '/^<<<<<<< /d' -e '/^=======$/,/^>>>>>>> /d'

=item B<ifdef>

原始文本和转换后的文本以L<cpp(1)> C<#ifdef>格式打印。

    #ifdef ORIGINAL
    original text
    #endif
    #ifdef JA
    translated Japanese text
    #endif

您可以通过B<unifdef>命令仅检索日语文本：

    unifdef -UORIGINAL -DJA foo.ja.pm

=item B<space>

原始文本和转换后的文本之间以单个空行分隔。

=item B<xtxt>

如果格式为C<xtxt>（翻译文本）或未知，则仅打印翻译文本。

=back

=item B<--xlate-maxlen>=I<chars> (Default: 0)

将以下文本逐行翻译成中文。

=item B<-->[B<no->]B<xlate-progress> (Default: True)

将以下文本翻译成中文。

=item B<--match-all>

在 STDERR 输出中实时查看翻译结果。

=back

=head1 CACHE OPTIONS

将整个文件的文本设置为目标区域。

=over 7

=item --cache-clear

B<xlate> 模块可以为每个文件存储翻译的缓存文本，并在执行之前读取它，以消除向服务器请求的开销。使用默认的缓存策略 C<auto>，它仅在目标文件的缓存文件存在时维护缓存数据。

=item --xlate-cache=I<strategy>

=over 4

=item C<auto> (Default)

B<--cache-clear> 选项可用于初始化缓存管理或刷新所有现有的缓存数据。执行此选项后，如果不存在缓存文件，则会创建一个新的缓存文件，然后自动进行维护。

=item C<create>

如果缓存文件存在，则维护缓存文件。

=item C<always>, C<yes>, C<1>

创建空的缓存文件并退出。

=item C<clear>

只要目标是普通文件，就始终维护缓存。

=item C<never>, C<no>, C<0>

首先清除缓存数据。

=item C<accumulate>

即使存在缓存文件，也不要使用缓存文件。

=back

=back

=head1 COMMAND LINE INTERFACE

您可以通过使用分发中包含的C<xlate>命令，轻松地从命令行使用此模块。请参阅C<xlate>帮助信息以了解用法。

C<xlate>命令与Docker环境配合使用，因此即使您手头没有安装任何东西，只要Docker可用，您就可以使用它。使用C<-D>或C<-C>选项。

此外，由于提供了各种文档样式的makefile，因此可以在不进行特殊指定的情况下将其翻译成其他语言。使用C<-M>选项。

您还可以结合Docker和make选项，以便在Docker环境中运行make。

像C<xlate -GC>这样运行将启动一个带有当前工作git存储库挂载的shell。

详细信息请参阅L<SEE ALSO/ARTICLES>部分中的日文文章。

    xlate [ options ] -t lang file [ greple options ]
	-h   help
	-v   show version
	-d   debug
	-n   dry-run
	-a   use API
	-c   just check translation area
	-r   refresh cache
	-s   silent mode
	-e # translation engine (default "deepl")
	-p # pattern to determine translation area
	-w # wrap line by # width
	-o # output format (default "xtxt", or "cm", "ifdef")
	-f # from lang (ignored)
	-t # to lang (required, no default)
	-m # max length per API call
	-l # show library files (XLATE.mk, xlate.el)
        --   terminate option parsing
    Make options
	-M   run make
	-n   dry-run
    Docker options
	-G   mount git top-level directory
	-B   run in non-interactive (batch) mode
	-R   mount read-only
	-E * specify environment variable to be inherited
	-I * specify altanative docker image (default: tecolicom/xlate:version)
	-D * run xlate on the container with the rest parameters
	-C * run following command on the container, or run shell

    Control Files:
	*.LANG    translation languates
	*.FORMAT  translation foramt (xtxt, cm, ifdef)
	*.ENGINE  translation engine (deepl or gpt3)


=head1 EMACS

您可以通过使用存储库中包含的 C<xlate> 命令从命令行轻松使用此模块。有关用法，请参阅 C<xlate> 帮助信息。

=head1 ENVIRONMENT

=over 7

=item DEEPL_AUTH_KEY

加载存储库中包含的 F<xlate.el> 文件以从 Emacs 编辑器中使用 C<xlate> 命令。C<xlate-region> 函数翻译给定的区域。默认语言为 C<EN-US>，您可以使用前缀参数调用它来指定语言。

=item OPENAI_API_KEY

OpenAI身份验证密钥。

=back

=head1 INSTALL

=head2 CPANMINUS

    $ cpanm App::Greple::xlate

=head2 TOOLS

您需要安装DeepL和ChatGPT的命令行工具。

L<https://github.com/DeepLcom/deepl-python>

L<https://github.com/tecolicom/App-gpty>

=head1 SEE ALSO

为 DeepL 服务设置您的身份验证密钥。

L<App::Greple::xlate::deepl>

L<App::Greple::xlate::gpt3>

L<https://hub.docker.com/r/tecolicom/xlate>

=over 7

=item L<https://github.com/DeepLcom/deepl-python>

L<App::Greple::xlate>

=item L<https://github.com/openai/openai-python>

OpenAI Python库

=item L<https://github.com/tecolicom/App-gpty>

OpenAI命令行界面

=item L<App::Greple>

DeepL Python 库和 CLI 命令。

=item L<App::Greple::update>

有关目标文本模式的详细信息，请参阅 B<greple> 手册。使用 B<--inside>、B<--outside>、B<--include>、B<--exclude> 选项来限制匹配区域。

=item L<App::sdif>

您可以使用 C<-Mupdate> 模块根据 B<greple> 命令的结果修改文件。

=back

=head2 ARTICLES

=over 2

=item * L<https://qiita.com/kaz-utashiro/items/1c1a51a4591922e18250>

使用DeepL API进行翻译和替换仅必要的部分的Greple模块（日语）

=item * L<https://qiita.com/kaz-utashiro/items/a5e19736416ca183ecf6>

使用DeepL API模块在15种语言中生成文档（日语）

=item * L<https://qiita.com/kaz-utashiro/items/1b9e155d6ae0620ab4dd>

带有DeepL API的自动翻译Docker环境（日语）

=back

=head1 AUTHOR

Kazumasa Utashiro

=head1 LICENSE

Copyright © 2023-2024 Kazumasa Utashiro.

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut
