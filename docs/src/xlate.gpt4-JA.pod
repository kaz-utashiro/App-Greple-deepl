=encoding utf-8

=head1 NAME

App::Greple::xlate - grepleのための翻訳サポートモジュール

=head1 SYNOPSIS

    greple -Mxlate -e ENGINE --xlate pattern target-file

    greple -Mxlate::deepl --xlate pattern target-file

=head1 VERSION

Version 0.30

=head1 DESCRIPTION

B<Greple> B<xlate> モジュールは、目的のテキストブロックを見つけて、それを翻訳されたテキストで置き換えます。現在、DeepL (F<deepl.pm>) と ChatGPT (F<gpt3.pm>) モジュールがバックエンドエンジンとして実装されています。gpt-4の実験的なサポートも含まれています。

Perlのpodスタイルで書かれたドキュメント内の通常のテキストブロックを翻訳したい場合は、C<xlate::deepl> と C<perl> モジュールを使って B<greple> コマンドをこのように使用します：

    greple -Mxlate::deepl -Mperl --pod --re '^(\w.*\n)+' --all foo.pm

このコマンドでは、パターン文字列 C<^(\w.*\n)+> は英数字で始まる連続する行を意味します。このコマンドは翻訳されるべきエリアをハイライトして表示します。オプション B<--all> は全文を生成するために使用されます。

=for html <p>
<img width="750" src="https://raw.githubusercontent.com/kaz-utashiro/App-Greple-xlate/main/images/select-area.png">
</p>

次に、選択されたエリアを翻訳するために C<--xlate> オプションを追加します。すると、望ましいセクションを見つけて、それを B<deepl> コマンドの出力で置き換えます。

デフォルトでは、オリジナルテキストと翻訳テキストは、L<git(1)>と互換性のある「コンフリクトマーカー」形式で出力されます。C<ifdef>形式を使用すると、L<unifdef(1)>コマンドを使って簡単に必要な部分を取得できます。出力形式はB<--xlate-format>オプションで指定できます。

=for html <p>
<img width="750" src="https://raw.githubusercontent.com/kaz-utashiro/App-Greple-xlate/main/images/format-conflict.png">
</p>

全てのテキストを翻訳したい場合は、B<--match-all>オプションを使用します。これは、テキスト全体にマッチするパターンC<(?s).+>を指定するショートカットです。

=head1 OPTIONS

=over 7

=item B<--xlate>

=item B<--xlate-color>

=item B<--xlate-fold>

=item B<--xlate-fold-width>=I<n> (Default: 70)

各マッチしたエリアに対して翻訳プロセスを呼び出します。

このオプションがない場合、B<greple>は通常の検索コマンドとして動作します。そのため、実際の作業を行う前に、ファイルのどの部分が翻訳の対象になるかを確認できます。

コマンドの結果は標準出力に出るので、必要に応じてファイルにリダイレクトするか、L<App::Greple::update>モジュールの使用を検討してください。

オプションB<--xlate>は、B<--color=never>オプションとともにB<--xlate-color>オプションを呼び出します。

B<--xlate-fold> オプションを使用すると、指定された幅で変換されたテキストが折りたたまれます。デフォルトの幅は70で、B<--xlate-fold-width> オプションで設定できます。ランイン操作用に4列が予約されているため、各行は最大で74文字を保持できます。

=item B<--xlate-engine>=I<engine>

使用する翻訳エンジンを指定します。C<-Mxlate::deepl> のようにエンジンモジュールを直接指定する場合、このオプションを使用する必要はありません。

=item B<--xlate-labor>

=item B<--xlabor>

翻訳エンジンを呼び出す代わりに、あなたが作業することが期待されています。翻訳するテキストを準備した後、それらはクリップボードにコピーされます。あなたはそれらをフォームに貼り付け、結果をクリップボードにコピーし、リターンキーを押すことが期待されています。

=item B<--xlate-to> (Default: C<EN-US>)

対象言語を指定します。B<DeepL> エンジンを使用する場合、利用可能な言語は C<deepl languages> コマンドで取得できます。

=item B<--xlate-format>=I<format> (Default: C<conflict>)

元のテキストと翻訳されたテキストの出力形式を指定します。

=over 4

=item B<conflict>, B<cm>

元のテキストと変換されたテキストは、L<git(1)> コンフリクトマーカー形式で印刷されます。

    <<<<<<< ORIGINAL
    original text
    =======
    translated Japanese text
    >>>>>>> JA

次の L<sed(1)> コマンドによって元のファイルを復元できます。

    sed -e '/^<<<<<<< /d' -e '/^=======$/,/^>>>>>>> /d'

=item B<ifdef>

原文と変換されたテキストは、L<cpp(1)> C<#ifdef> 形式で印刷されます。

    #ifdef ORIGINAL
    original text
    #endif
    #ifdef JA
    translated Japanese text
    #endif

B<unifdef> コマンドを使って、日本語のテキストのみを取得できます：

    unifdef -UORIGINAL -DJA foo.ja.pm

=item B<space>

原文と変換されたテキストは、単一の空白行で区切られて印刷されます。

=item B<xtxt>

形式が C<xtxt>（翻訳されたテキスト）または不明な場合、翻訳されたテキストのみが印刷されます。

=back

=item B<--xlate-maxlen>=I<chars> (Default: 0)

一度にAPIに送信するテキストの最大長を指定します。デフォルト値は無料のDeepLアカウントサービス用に設定されています：API用は128K（B<--xlate>）、クリップボードインターフェース用は5000（B<--xlate-labor>）。Proサービスを使用している場合は、これらの値を変更できるかもしれません。

=item B<-->[B<no->]B<xlate-progress> (Default: True)

標準エラー出力（STDERR）でリアルタイムに翻訳結果を確認します。

=item B<--match-all>

ファイルの全テキストを対象領域として設定します。

=back

=head1 CACHE OPTIONS

B<xlate> モジュールは、各ファイルの翻訳されたテキストのキャッシュを保存し、実行前に読み込むことで、サーバーに問い合わせるオーバーヘッドを排除できます。デフォルトのキャッシュ戦略 C<auto> では、対象ファイルのキャッシュファイルが存在する場合にのみキャッシュデータを維持します。

=over 7

=item --cache-clear

B<--cache-clear> オプションは、キャッシュ管理を開始するため、または既存のキャッシュデータをリフレッシュするために使用できます。このオプションで実行すると、キャッシュファイルが存在しない場合は新しいキャッシュファイルが作成され、その後自動的に維持されます。

=item --xlate-cache=I<strategy>

=over 4

=item C<auto> (Default)

キャッシュファイルが存在する場合は、そのファイルを維持します。

=item C<create>

空のキャッシュファイルを作成して終了します。

=item C<always>, C<yes>, C<1>

対象が通常のファイルである限り、キャッシュを維持します。

=item C<clear>

まずキャッシュデータをクリアします。

=item C<never>, C<no>, C<0>

キャッシュファイルが存在しても、決してキャッシュファイルを使用しません。

=item C<accumulate>

デフォルトの動作では、使用されていないデータはキャッシュファイルから削除されます。それらを削除せずにファイルに保持したい場合は、C<accumulate> を使用してください。

=back

=back

=head1 COMMAND LINE INTERFACE

リポジトリに含まれる C<xlate> コマンドを使用することで、このモジュールをコマンドラインから簡単に使用できます。使用方法については、C<xlate> のヘルプ情報を参照してください。

=head1 EMACS

リポジトリに含まれる F<xlate.el> ファイルをロードして、Emacs エディターから C<xlate> コマンドを使用します。C<xlate-region> 関数は指定された範囲を翻訳します。デフォルト言語は C<EN-US> で、プレフィックス引数を使って言語を指定することができます。

=head1 ENVIRONMENT

=over 7

=item DEEPL_AUTH_KEY

DeepLサービスの認証キーを設定してください。

=item OPENAI_API_KEY

OpenAIの認証キー。

=back

=head1 INSTALL

=head2 CPANMINUS

    $ cpanm App::Greple::xlate

=head2 TOOLS

DeepLとChatGPTのコマンドラインツールをインストールする必要があります。

L<https://github.com/DeepLcom/deepl-python>

L<https://github.com/tecolicom/App-gpty>

=head1 SEE ALSO

L<App::Greple::xlate>

L<App::Greple::xlate::deepl>

L<App::Greple::xlate::gpt3>

L<https://hub.docker.com/r/tecolicom/xlate>

=over 7

=item L<https://github.com/DeepLcom/deepl-python>

DeepL PythonライブラリとCLIコマンド。

=item L<https://github.com/openai/openai-python>

OpenAI Pythonライブラリ

=item L<https://github.com/tecolicom/App-gpty>

OpenAIコマンドラインインターフェース

=item L<App::Greple>

対象テキストパターンの詳細については、B<greple>マニュアルを参照してください。マッチングエリアを限定するには、B<--inside>、B<--outside>、B<--include>、B<--exclude>オプションを使用します。

=item L<App::Greple::update>

C<-Mupdate>モジュールを使用して、B<greple>コマンドの結果によってファイルを変更できます。

=item L<App::sdif>

B<sdif>を使用して、B<-V>オプションでコンフリクトマーカー形式を並べて表示します。

=back

=head2 ARTICLES

=over 2

=item * L<https://qiita.com/kaz-utashiro/items/1c1a51a4591922e18250>

DeepL APIを使用して必要な部分のみを翻訳・置換するGrepleモジュール（日本語）

=item * L<https://qiita.com/kaz-utashiro/items/a5e19736416ca183ecf6>

DeepL APIモジュールで15言語の文書を生成（日本語）

=item * L<https://qiita.com/kaz-utashiro/items/1b9e155d6ae0620ab4dd>

DeepL APIを使用した自動翻訳Docker環境（日本語）

=back

=head1 AUTHOR

Kazumasa Utashiro

=head1 LICENSE

Copyright © 2023-2024 Kazumasa Utashiro.

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut
